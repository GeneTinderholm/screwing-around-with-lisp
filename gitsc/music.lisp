(defvar note-table)
(setf note-table '((c . 1)
                     (c-sharp . 2)
                     (d . 3)
                     (d-sharp . 4)
                     (e . 5)
                     (f . 6)
                     (f-sharp . 7)
                     (g . 8)
                     (g-sharp . 9)
                     (a . 10)
                     (a-sharp . 11)
                     (b . 12)))

(defun numbers (lst)
  (mapcar #'(lambda (x)
              (cdr (assoc x note-table)))
          lst))

(defun notes (lst)
  (mapcar #'(lambda (x)
              (car (rassoc x note-table)))
          lst))

(defun raise (x lst)
  (mapcar #'(lambda (el)
              (+ el x))
          lst))

(defun normalize (lst)
  (mapcar #'(lambda (el)
              (cond
                ((> el 12) (- el 12))
                ((< el 0) (+ el 12))
                (t el)))
          lst))

(defun transpose (x lst)
  (notes (normalize (raise x (numbers lst)))))
